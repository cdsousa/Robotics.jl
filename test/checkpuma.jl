
import Robotics: array, skew

puma560_dhparams(q) =
    array([  pi/2,        0,         0,   q[1]],
          [     0,   0.4318,         0,   q[2]],
          [ -pi/2,   0.0203,   0.15005,   q[3]],
          [  pi/2,        0,    0.4318,   q[4]],
          [ -pi/2,        0,         0,   q[5]],
          [     0,        0,         0,   q[6]])

dof = 6

m1 = 0
m2 = 17.4
m3 = 4.8
m4 = 0.82
m5 = 0.34
m6 = 0.09
m = [m1, m2, m3, m4, m5, m6]

r1 = [0., 0., 0.]
r2 = [ -.3638,  .006,    .2275]
r3 = [ -.0203,  -.0141,  .070]
r4 = [ 0,    .019,    0]
r5 = [0.,   0.,   0. ]
r6 = [0.,   0.,   .032]
r = array(r1, r2, r3, r4, r5, r6)

# %        Ixx     Iyy      Izz    -Ixy     -Iyz     -Ixz
cI1 = [0.,      0.35,    0.,      0.,   0.,   0.]
cI2 = [ .13,     .524,    .539,   0.,   0.,   0.]
cI3 = [ .066,    .086,    .0125,  0.,   0.,   0.]
cI4 = [1.8e-3,  1.3e-3,  1.8e-3,  0.,   0.,   0.]
cI5 = [ .3e-3,   .4e-3,   .3e-3,  0.,   0.,   0.]
cI6 = [ .15e-3,  .15e-3,  .04e-3, 0.,   0.,   0.]
cI = array(cI1, cI2, cI3, cI4, cI5, cI6)

cI2sI(cI) = [cI[1], -cI[4], -cI[6], cI[2], -cI[5], cI[3]]
I = [vectosymm(cI2sI(ci)) for ci in cI]

l = Vector{Float64}[m[i]*r[i] for i in 1:dof]

symmetrize! = x->Base.LinAlg.copytri!(x, 'U')
L = Matrix{Float64}[symmetrize!(I[i] + m[i]*skew(r[i])'*skew(r[i])) for i in 1:dof]


### Dynamic parameters ###

dynp, format = dynp_init( L=(L,:symm3), l=(l,:vec3), m=(m,:scalar) )
dp = dynp_vect2dict(dynp, dof, format)

@test dp[:L] == L
@test dp[:l] == l
@test dp[:m] == m


dynparms_ok = [0.0, -0, -0, 0.34999999999999998, -0, 0.0, 0.0, 0.0, 0.0, 0, 1.03118515, 0.037980719999999996, 1.4401022999999999,
                    3.7274564059999999, -0.023751000000000001, 2.8425240559999998, -6.33012, 0.10439999999999999, 3.9585, 17.4,
                    0.090474288000000014, -0.0013739039999999998, 0.0068208000000000001, 0.111498032, 0.0047375999999999998,
                    0.015432319999999999, -0.09743999999999998, -0.06767999999999999, 0.336, 4.8, 0.0020960200000000001, -0, -0,
                    0.0012999999999999999, -0, 0.0020960200000000001, 0.0, 0.015579999999999998, 0.0, 0.82, 0.00029999999999999997, -0, -0,
                    0.00040000000000000002, -0, 0.00029999999999999997, 0.0, 0.0, 0.0, 0.34, 0.00024216, -0, -0, 0.00024216, -0,
                    4.0000000000000003e-05, 0.0, 0.0, 0.0028799999999999997, 0.09]


@test_approx_eq_eps dynp dynparms_ok 1e-10


### Geometry ###

q_test = [0.7504516826728697, 0.8395156106908136, 0.16851233582594916, 0.3849629637427072, 0.5252993946810777, 0.6701207256444748]
dq_test = [0.24721855939629367, 0.9805915670454258, 0.9895299755642817, 0.7861135739668947, 0.273842245476577, 0.17182358900767503]
ddq_test = [0.707405815485141, 0.25295715193420953, 0.9763909835998361, 0.8412822676113918, 0.4867768296473465, 0.11480270540937143]

Ti_test = interlink_transfs_dhstd(puma560_dhparams(q_test));
Ti_inv_test = [inv_transfmat(T) for T in Ti_test];
T_test = transfs_tobase(Ti_test);
S_test = interlink_lie_S_rotjoint_dhstd(puma560_dhparams(q_test));

T_ok = [-0.655113870655343 -0.474277925274361 -0.588120962109346 0.0540498757911011
         0.524340309498464  0.275038163391149 -0.805866768463298 -0.154761559833806
         0.543960528264717 -0.836310025215453 0.0685017183295358  0.568944734102513
                       0.0                0.0                0.0                1.0]

@test_approx_eq_eps T_test[end] T_ok 1e-10


### Dynamics ###

g = [0, 0, -9.81]

tau_test = rne_park(q_test, dq_test, ddq_test, Ti_inv_test, S_test, g, dp[:L], dp[:l], dp[:m]);

tau_ok = [  0.986185688341252
             16.1055550633721
            -6.54839494827661
          0.00626452648190803
          -0.0208972707132494
          5.59805923645945e-5]

@test_approx_eq_eps tau_test tau_ok 1e-10
